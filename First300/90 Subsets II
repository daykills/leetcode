class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()

        def dfs(startIndex, path):
            result.append(path[:])

            for i in range(startIndex, len(nums)):
                if i > startIndex and nums[i] == nums[i - 1]:
                    continue
                path.append(nums[i])
                dfs(i + 1, path)
                path.pop()
        result = []
        dfs(0, [])
        return result

同78题
对于每个元素，有「选」或者「不选」两种情况。
时间复杂度：O(2^n)，相当于一个n层的二叉树。
空间复杂度：O(n)，递归的最大深度-path,不算保存最终结果所需的空间。