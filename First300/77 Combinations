class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        def dfs(path, startIndex):
            if len(path) == k:
                result.append(path[:])
                return 

            for i in range(startIndex, n + 1):
                path.append(i)
                dfs(path, i + 1)
                path.pop()            
            

        result = []
        dfs([], 1)
        return result

Time complexity：  N!/(N−k)!k! is a number of combinations to build.
Space complexity：  N!/(N−k)!k! is a number of combinations to build.