class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        hashmap = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        
        path = ''
        res = []
        
        def backtrack(path, i):
            if len(path) == len(digits):
                res.append(path[::])
                return
            
            for c in hashmap[digits[i]]:
                backtrack(path + c, i + 1)
                
        if digits:
            backtrack('', 0)
        return res
时间复杂度： O(4^N⋅N)
空间复杂度： O(n)