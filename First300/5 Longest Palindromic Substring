class Solution:
    def longestPalindrome(self, s: str) -> str:
        result = ""

        for i, c in enumerate(s):
            odd_type = self.dfs(i, i, s)
            if len(odd_type) >= len(result):
                result = odd_type

            oven_type = self.dfs(i, i + 1, s)
            if len(oven_type) >= len(result):
                result = oven_type

        return result
    
    def dfs(self, l, r, s):
        while 0 <= l < len(s) and 0 <= r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1     
        return s[l+1: r]

时间复杂度： O(n^2)
空间复杂度： O(1)